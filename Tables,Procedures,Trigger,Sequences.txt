// Procedure for intimation to Survey

CREATE OR REPLACE PROCEDURE DPRC_CLAIM_SURVEY (P_CLM_UID IN NUMBER,
                                               P_USER_ID IN VARCHAR2,
                                               P_STATUS OUT NUMBER,
                                               P_ERR_MSG OUT VARCHAR2
                                             )
AS
    CURSOR C1 IS
        SELECT CLM_UID,CLM_NO,CLM_VEH_CHASSIS_NO, CLM_VEH_REGN_NO, CLM_VEG_ENGINE_NO
        FROM MOTOR_CLAIM
        WHERE CLM_UID = P_CLM_UID;
	C1_REC      C1%ROWTYPE;
BEGIN
    P_STATUS:=1;
    IF C1%ISOPEN THEN
        CLOSE C1;
    END IF;
    OPEN C1;
        FETCH C1 INTO C1_REC;
    CLOSE C1;
    UPDATE MOTOR_CLAIM
        SET CLM_SUR_CR_YN = 'Y'
		WHERE CLM_UID = P_CLM_UID;
    INSERT INTO MOTOR_CLM_SUR_HDR (SUR_UID,             SUR_CLM_UID,         
                                   SUR_CLM_NO,        
								   SUR_CHASSIS_NO,      SUR_REGN_NO,
								   SUR_ENGINE_NO,		SUR_STATUS,
								   SUR_CR_BY,
								   SUR_CR_DT)
                         VALUES (SEQ_SUR_UID.NEXTVAL,			C1_REC.CLM_UID, 
                                 C1_REC.CLM_NO,					
								 C1_REC.CLM_VEH_CHASSIS_NO,		C1_REC.CLM_VEH_REGN_NO,
								 C1_REC.CLM_VEG_ENGINE_NO,		'P',
								 P_USER_ID,
								 SYSDATE);                                
    COMMIT;
    P_ERR_MSG := 'Successfully send for intimaion';
EXCEPTION
    WHEN OTHERS THEN
	    ROLLBACK;
        P_STATUS:=0;
        P_ERR_MSG := 'Unable to intimate surveyor';  
END;
/

// Procedure for Save Survey Details

CREATE OR REPLACE PROCEDURE DPRC_SAVE_SURVEY_DETAILS (
	P_SUR_UID			IN VARCHAR2,
    P_ITEM_CODE 		IN VARCHAR2,
    P_TYPE 				IN VARCHAR2,
    P_UNIT_PRICE 		IN NUMBER,
    P_QUANTITY 			IN NUMBER,
    P_FC_AMT 			IN NUMBER,
    P_LC_AMT 			IN NUMBER,
    P_STATUS 			OUT NUMBER,
    P_SURD_UID 			IN OUT NUMBER,
    P_ERR_MSG 			OUT VARCHAR2
)
AS
	CURSOR C1 IS
        SELECT SUM(SURD_FC_AMT) AS SURD_FC_AMT,SUM(SURD_LC_AMT) AS SURD_LC_AMT
        FROM MOTOR_CLM_SUR_DTL
        WHERE SURD_SUR_UID = P_SUR_UID;
	C1_REC      C1%ROWTYPE;
BEGIN
	P_STATUS := 1;
	IF(NVL(P_SURD_UID,0)=0) THEN
		P_SURD_UID:=SEQ_SURD_UID.NEXTVAL;
		INSERT INTO MOTOR_CLM_SUR_DTL (
			SURD_UID,
			SURD_SUR_UID,
			SURD_ITEM_CODE,
			SURD_TYPE,
			SURD_UNIT_PRICE,
			SURD_QUANTITY,
			SURD_FC_AMT,
			SURD_LC_AMT
		) VALUES (
			P_SURD_UID,
			P_SUR_UID,		
			P_ITEM_CODE ,
			P_TYPE 		,
			P_UNIT_PRICE,
			P_QUANTITY 	,
			P_FC_AMT 	,
			P_LC_AMT 	
			);	
	ELSE
 
		UPDATE MOTOR_CLM_SUR_DTL
			SET SURD_TYPE = P_TYPE,
				SURD_UNIT_PRICE = P_UNIT_PRICE,
				SURD_QUANTITY = P_QUANTITY,
				SURD_FC_AMT = P_FC_AMT,
				SURD_LC_AMT = P_LC_AMT
			WHERE SURD_SUR_UID = P_SUR_UID AND SURD_UID = P_SURD_UID;
	END IF;	

    P_ERR_MSG := 'Details saved successfully';
	IF C1%ISOPEN THEN
        CLOSE C1;
    END IF;
    OPEN C1;
        FETCH C1 INTO C1_REC;
        IF C1%NOTFOUND THEN
            P_STATUS:= 0;
            P_ERR_MSG := 'No records found for the given SUR_UID';
        END IF;
    CLOSE C1;
    UPDATE MOTOR_CLM_SUR_HDR
        SET SUR_FC_AMT = C1_REC.SURD_FC_AMT ,
            SUR_LC_AMT = C1_REC.SURD_LC_AMT 
        WHERE SUR_UID = P_SUR_UID;     
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        P_STATUS := 0;
        P_ERR_MSG := 'Error saving survey details: ' ;
        ROLLBACK;
END ;
/

// Procedure for Approve Survey 


CREATE OR REPLACE PROCEDURE DPRC_APPROVE_SURVEY (
    P_SUR_UID        IN VARCHAR2,
    P_CLM_UID        IN VARCHAR2,
    P_USER_ID        IN VARCHAR2,
    P_STATUS         OUT NUMBER,
    P_ERR_MSG        OUT VARCHAR2
) AS
    V_SUR_NO         VARCHAR2(100);
BEGIN
    V_SUR_NO := 'S/' || TO_CHAR(SYSDATE, 'YYYY') || '/' || LPAD(P_SUR_UID, 5, '0');
 
    UPDATE MOTOR_CLM_SUR_HDR
    SET SUR_NO = V_SUR_NO,
        SUR_APPR_DT = SYSDATE,
        SUR_APPR_BY = P_USER_ID,
        SUR_STATUS = 'S'
    WHERE SUR_UID = P_SUR_UID;
 
    UPDATE MOTOR_CLAIM
    SET CLM_SUR_APPR_YN = 'Y',
        CLM_SUR_NO = V_SUR_NO
    WHERE CLM_UID = P_CLM_UID;
 
    P_STATUS := 1;
    P_ERR_MSG := 'Survey Approved';
 
EXCEPTION
    WHEN OTHERS THEN
        P_STATUS := 0;
        P_ERR_MSG := SQLERRM;
END DPRC_APPROVE_SURVEY;
/

// TRIGGER

CREATE OR REPLACE TRIGGER TRG_MOTOR_CLM_SUR_DTL_HIST
AFTER INSERT OR UPDATE OR DELETE ON E0187.MOTOR_CLM_SUR_DTL 
FOR EACH ROW
BEGIN
  CASE
    WHEN INSERTING THEN
      INSERT INTO MOTOR_CLM_SUR_DTL_HIST (SURDH_UID, SURDH_SRL, SURDH_ACTION, SURDH_ITEM_CODE, SURDH_TYPE, SURDH_UNIT_PRICE, SURDH_QUANTITY, 
	  SURDH_FC_AMT, SURDH_LC_AMT, SURDH_REMARKS, SURDH_CR_BY, SURDH_CR_DT, SURDH_UP_BY, SURDH_UP_DT) 
      VALUES (:NEW.SURD_UID, 1, 'I', :NEW.SURD_ITEM_CODE, :NEW.SURD_TYPE, :NEW.SURD_UNIT_PRICE, :NEW.SURD_QUANTITY, :NEW.SURD_FC_AMT, :NEW.SURD_LC_AMT, :NEW.SURD_REMARKS, :NEW.SURD_CR_BY, :NEW.SURD_CR_DT, :NEW.SURD_UP_BY, :NEW.SURD_UP_DT);
    WHEN UPDATING THEN 
      INSERT INTO MOTOR_CLM_SUR_DTL_HIST (SURDH_UID, SURDH_SRL, SURDH_ACTION, SURDH_ITEM_CODE, SURDH_TYPE, SURDH_UNIT_PRICE, SURDH_QUANTITY, SURDH_FC_AMT, SURDH_LC_AMT, SURDH_REMARKS, SURDH_CR_BY, SURDH_CR_DT, SURDH_UP_BY, SURDH_UP_DT) 
      VALUES (:NEW.SURD_UID, (SELECT COUNT(*) FROM MOTOR_CLM_SUR_DTL_HIST WHERE SURDH_UID =:NEW.SURD_UID), 'U', :NEW.SURD_ITEM_CODE, :NEW.SURD_TYPE, :NEW.SURD_UNIT_PRICE, :NEW.SURD_QUANTITY, :NEW.SURD_FC_AMT, :NEW.SURD_LC_AMT, :NEW.SURD_REMARKS, :NEW.SURD_CR_BY, :NEW.SURD_CR_DT, :NEW.SURD_UP_BY, :NEW.SURD_UP_DT);
    WHEN DELETING THEN
      INSERT INTO MOTOR_CLM_SUR_DTL_HIST (SURDH_UID, SURDH_SRL, SURDH_ACTION, SURDH_ITEM_CODE, SURDH_TYPE, SURDH_UNIT_PRICE, SURDH_QUANTITY, SURDH_FC_AMT, SURDH_LC_AMT, SURDH_REMARKS, SURDH_CR_BY, SURDH_CR_DT, SURDH_UP_BY, SURDH_UP_DT) 
      VALUES (:OLD.SURD_UID, (SELECT COUNT(*) FROM MOTOR_CLM_SUR_DTL_HIST WHERE SURDH_UID = :OLD.SURD_UID), 'D', :OLD.SURD_ITEM_CODE, :OLD.SURD_TYPE, :OLD.SURD_UNIT_PRICE, :OLD.SURD_QUANTITY, :OLD.SURD_FC_AMT, :OLD.SURD_LC_AMT, :OLD.SURD_REMARKS, :OLD.SURD_CR_BY, :OLD.SURD_CR_DT, :OLD.SURD_UP_BY, :OLD.SURD_UP_DT);
  END CASE;									
 
END;
/


//SEQUENCES


CREATE SEQUENCE SEQ_POLI_UID
START WITH 1
INCREMENT BY 1
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_CLM_UID
START WITH 1
INCREMENT BY 1
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_SUR_UID
START WITH 1
INCREMENT BY 1
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_SURD_UID
START WITH 1
INCREMENT BY 1
NOCYCLE
NOCACHE;

//TABLES


--CODES_MASTER


CREATE TABLE SNEHA_CODES_MASTER (
    CM_CODE VARCHAR2(12) NOT NULL,
    CM_TYPE VARCHAR2(12) NOT NULL,
    CM_DESC VARCHAR2(240),
    CM_VALUE NUMBER(9),
    CM_CR_BY VARCHAR2(12),
    CM_CR_DT DATE,
    CM_UP_BY VARCHAR2(12),
    CM_UP_DT DATE,
    CM_ACTIVE_YN VARCHAR2(1) DEFAULT 'Y',
	CM_PARENT_CODE  VARCHAR2(12),
    CONSTRAINT PK_CODES_MASTER PRIMARY KEY (CM_CODE, CM_TYPE)
);

--ERROR_CODE_MASTER

CREATE TABLE ERROR_CODE_MASTER (
    ERR_CODE VARCHAR2(12 ) NOT NULL,   
    ERR_TYPE VARCHAR2(12 ) NOT NULL,           
    ERR_DESC VARCHAR2(240),           
    ERR_CR_BY VARCHAR2(12),           
    ERR_CR_DT DATE,                        
    ERR_UP_BY VARCHAR2(12),           
    ERR_UP_DT DATE,                        
    CONSTRAINT PK_ERROR_CODE_MASTER PRIMARY KEY (ERR_CODE,ERR_TYPE)  
);

--USER_MASTER

CREATE TABLE SNEHA_USER_MASTER (
    USER_ID VARCHAR2(12) NOT NULL,
    USER_NAME VARCHAR2(30),
    USER_PASSWORD VARCHAR2(24),
    USER_TYPE VARCHAR2(1),
    USER_CR_BY VARCHAR2(12),
    USER_CR_DT DATE,
    USER_UP_BY VARCHAR2(12),
    USER_UP_DT DATE,
	USER_ACTIVE_YN VARCHAR2(1) DEFAULT 'Y',
    CONSTRAINT PK_USER_MASTER PRIMARY KEY (USER_ID)
);

--MOTOR_POLICY

CREATE TABLE MOTOR_POLICY (
    POL_UID NUMBER NOT NULL,                 
    POL_NO VARCHAR2(30 BYTE),                
    POL_ISS_DT DATE,                         
    POL_FM_DT DATE,                          
    POL_TO_DT DATE,                          
    POL_ASSR_NAME VARCHAR2(120 BYTE),        
    POL_ASSR_MOBILE VARCHAR2(20 BYTE),       
	POL_CURR_CODE VARCHAR2(12),
    POL_GROSS_FC_PREM NUMBER(9,2),           
    POL_GROSS_LC_PREM NUMBER(9,2),           
    POL_VEH_MAKE VARCHAR2(12 BYTE),          
    POL_VEH_MODEL VARCHAR2(12 BYTE),         
    POL_VEH_CHASSIS_NO VARCHAR2(30 BYTE),    
    POL_VEH_ENGINE_NO VARCHAR2(30 BYTE),     
    POL_VEH_REGN_NO VARCHAR2(30 BYTE),       
    POL_VEH_VALUE NUMBER(9,2),               
    POL_APPR_STATUS VARCHAR2(1 BYTE),        
    POL_APPR_DT DATE,                        
    POL_APPR_BY VARCHAR2(12 BYTE),           
    POL_CR_BY VARCHAR2(12 BYTE),             
    POL_CR_DT DATE,                          
    POL_UP_BY VARCHAR2(12 BYTE),             
    POL_UP_DT DATE,                          
    CONSTRAINT PK_MOTOR_POLICY PRIMARY KEY (POL_UID)  
);


--MOTOR_CLAIM


CREATE TABLE MOTOR_CLAIM (
    CLM_UID NUMBER NOT NULL,                  
    CLM_NO VARCHAR2(30 BYTE) NOT NULL,        
    CLM_POL_NO VARCHAR2(30 BYTE) NOT NULL,    
    CLM_POL_FM_DT DATE,                       
    CLM_POL_TO_DT DATE,                      
    CLM_POL_ASSR_NAME VARCHAR2(120 BYTE),    
    CLM_POL_ASSR_MOB VARCHAR2(20 BYTE),       
    CLM_LOSS_DT DATE NOT NULL,                
    CLM_INTM_DT DATE,                         
    CLM_REG_DT DATE,                          
    CLM_POL_REP_NO VARCHAR2(30 BYTE),         
    CLM_POL_REP_DTL VARCHAR2(120 BYTE),       
    CLM_LOSS_DESC VARCHAR2(120 BYTE),         
    CLM_VEH_MAKE VARCHAR2(12 BYTE),           
    CLM_VEH_MODEL VARCHAR2(12 BYTE),          
    CLM_VEH_CHASSIS_NO VARCHAR2(30 BYTE),     
    CLM_VEH_ENGINE_NO VARCHAR2(30 BYTE),      
    CLM_VEH_REGN_NO VARCHAR2(30 BYTE),       
    CLM_VEH_VALUE NUMBER(9,2),                
    CLM_SUR_CR_YN VARCHAR2(1 BYTE),           
    CLM_SUR_APPR_YN VARCHAR2(1 BYTE),         
    CLM_APPR_STATUS VARCHAR2(1 BYTE),         
    CLM_SUR_NO VARCHAR2(30 BYTE),             
    CLM_CR_BY VARCHAR2(12 BYTE),              
    CLM_CR_DT DATE,                           
    CLM_UP_BY VARCHAR2(12 BYTE),              
    CLM_UP_DT DATE,                           
    CONSTRAINT PK_MOTOR_CLAIM PRIMARY KEY (CLM_UID)  
);

--MOTOR_CLM_SUR_HDR

CREATE TABLE MOTOR_CLM_SUR_HDR (
    SUR_UID NUMBER NOT NULL,                 
    SUR_CLM_UID NUMBER,                      
    SUR_CLM_NO VARCHAR2(30 BYTE),            
    SUR_NO VARCHAR2(30 BYTE),                
    SUR_DATE DATE,                           
    SUR_LOCATION VARCHAR2(12 BYTE),          
    SUR_CHASSIS_NO VARCHAR2(30 BYTE),        
    SUR_REGN_NO VARCHAR2(30 BYTE),           
    SUR_ENGINE_NO VARCHAR2(24 BYTE),         
    SUR_CURR VARCHAR2(12 BYTE),              
    SUR_FC_AMT NUMBER(9,2),                  
    SUR_LC_AMT NUMBER(9,2),                  
    SUR_STATUS VARCHAR2(1 BYTE),             
    SUR_APPR_STS VARCHAR2(1 BYTE),           
    SUR_APPR_DT DATE,                        
    SUR_APPR_BY VARCHAR2(12 BYTE),           
    SUR_CR_BY VARCHAR2(12 BYTE),             
    SUR_CR_DT DATE,                          
    SUR_UP_BY VARCHAR2(12 BYTE),             
    SUR_UP_DT DATE,                          
    CONSTRAINT PK_MOTOR_CLM_SUR_HDR PRIMARY KEY (SUR_UID)  
);

--MOTOR_CLM_SUR_DTL

CREATE TABLE MOTOR_CLM_SUR_DTL (
    SURD_UID NUMBER NOT NULL,                  
    SURD_SUR_UID NUMBER,                       
    SURD_ITEM_CODE VARCHAR2(12 BYTE),         
    SURD_TYPE VARCHAR2(12 BYTE),              
    SURD_UNIT_PRICE NUMBER,                    
    SURD_QUANTITY NUMBER,                      
    SURD_FC_AMT NUMBER(9,2),                  
    SURD_LC_AMT NUMBER(9,2),                  
    SURD_REMARKS VARCHAR2(120 BYTE),           
    SURD_CR_BY VARCHAR2(12 BYTE),              
    SURD_CR_DT DATE,                           
    SURD_UP_BY VARCHAR2(12 BYTE),              
    SURD_UP_DT DATE,                           
    CONSTRAINT PK_MOTOR_CLM_SUR_DTL PRIMARY KEY (SURD_UID) 
);

--MOTOR_CLM_SUR_DTL_HIST

CREATE TABLE MOTOR_CLM_SUR_DTL_HIST (
    SURDH_UID NUMBER NOT NULL,                  
    SURDH_SRL NUMBER NOT NULL,                  
    SURDH_ACTION VARCHAR2(1 BYTE),      			
    SURDH_ITEM_CODE VARCHAR2(12 BYTE),          
    SURDH_TYPE VARCHAR2(12 BYTE),               
    SURDH_UNIT_PRICE NUMBER,                    
    SURDH_QUANTITY NUMBER,                      
    SURDH_FC_AMT NUMBER(9,2),                   
    SURDH_LC_AMT NUMBER(9,2),                   
    SURDH_REMARKS VARCHAR2(120 BYTE),           
    SURDH_CR_BY VARCHAR2(12 BYTE),               
    SURDH_CR_DT DATE,                             
    SURDH_UP_BY VARCHAR2(12 BYTE),                
    SURDH_UP_DT DATE,                             
    CONSTRAINT PK_MOTOR_CLM_SUR_DTL_HIST PRIMARY KEY (SURDH_UID, SURDH_SRL)  
);